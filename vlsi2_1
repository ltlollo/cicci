Layout stages :
	Technology mapping : from logic to gates
	Placement : arranging on a surface optimally
	Routing : connecting the gates with wires
	Tming analysis : how fast is the net?

main components (cell) in a library : geometric abstraction over physical
	NOT
	NAND
	NOR
	ADDER
	FLIP-FLOPS

differend variants in the lib.
	Fanin/out (eg. variadic NAND)
	timing, class (eg flip-flops)
	drive len.

NOTE : same heights, different widths
	same h. => to be stacked together
	diff w. => different complexity



NOTE : ball park numbers on 200k gates
	(#pins[], #cells) - ([2-8], ~25k)  ,  ([17-18], ~10k)  , (rst, ~1|2k)


Chip size measure :
	#gates
	#instances : library cells


palcer :
	in : netlist of gates
	out : location of each gate
		such that the router is able to connect them minimally
router :
	in : location
	out : connections
		such that wiring is minimal

-----
placer


simple model of space - equispaced grid
one gate per grid cell
goal : produce a placement for given netlist that minimize wirelen given a
cost model

optimizes estimated wire len.s for each wire
min(sum w. w in Wire. EstimatedLen(w))

connections from gate to gate called "Net", the things connected are called
"Points", the eintire gates-wires is "Netlist"


eg. 4point-net

5    ┌───⌫
4    │
3  ⌦─┼─⌫
2    │
1    └─⌫
0
 0123456789


wire cost estimators :
	half perimeter wirelen :
		half perimeter of smallest bounding box around all gates
		in 4net-eg. HPWL = (5 - 1) + (8 - 1) = 11
	HPWL =  (max g.x g in Gates - min g.x g in Gates) +
			(max g.y g in Gates - min g.y g in Gates)

	NOTE : always lower bound of real wire len
	ball park nums : most wires are short. (e^-x)


random iterative improvement :
	calculate sum ni. ni in nets HPWL(ni)
	swap randomly ni, nj in nets
	keep the result if L = new total HPWL is less than orig

problem : stuck in local minimum
solution : hill-climbing


T = temperature param
keep the result if P(delta L, T) :
	instead of always keeping the most local optimum, with some prob. P
	that deps on delta L (HPWL new - old) and T a temperature value

	P = e ^ (-delta_L/T)	// eg P = 0.72
	R = sample D			// D = random uniform [0, 1]
	if R < P
		keep the swap
		undo the swap

	adjust T down


	in the algo T goes from Hot -> Cool
	(hot/ worst decision / ability to hillclimb -> good decisions / mostly descend)
	


simulated anealing : 
	best global opt ? NO
	most efficient optimization ? NO not always
	is slow always ? NO
	params must be tuned ? NO, good heuristic
	always good results ? NO, awlsays run multiple times
	state of the art ? NO


-----
Analytical method

wite a function F(x1..xn, y1..yn) such that X, Y = (x1..yn) minimize F
solve analithically (find X, Y)

quadratic wire len model, where quadratic wirelen is for 2 points
	(x1-x2)^2 + (y1-y2)^2
for a k point net
	1. replace the real net (like in eg. 4point-net) with a fully connected
		clique (with k*(k-1)/2 wires)
	2. weight (mul) each wire with a number 1/(k-1) // traditionally used
	3. add the quadratic wirelen (norm2square) for each pair of connections

eg. 4net
   a_____b
    \-c-/
	 \|/
      d

a = (0, 5), b = (4, 5), c = (3, 3), d =(3, 1)

k = 4, w = 1/(4-1)
Qe =
	(1/3)((0-4)^2 + (5-5)^2) +	// ab
	(1/3)((4-3)^2 + (5-3)^2) +	// bc
	(1/3)((3-3)^2 + (3-1)^2) +	// cd
	(1/3)((3-0)^2 + (1-5)^2) +	// da
	(1/3)((0-3)^2 + (5-3)^2) +	// ac
	(1/3)((4-3)^2 + (5-3)^2) +	// bc
	(1/3)((3-3)^2 + (3-1)^2) +	// cd
	= somthing


assume gates are dimentionally.
also assume gates can overlap.


to model analithically :
S := surface of chip dimentions		eg. ([0 to 1.0] x [0 to 1.0])
P := list of point indices			eg. (1, 2) 1-based idx
N := nets with weights
D := pad list at fixed positions n the border	eg. (0, 0), (1, 0.5)

Q = sum p1, p2. p1, p2 in { P U D }, p1 connected p2.
		w_p1p2 * (p1.x-p2.x)^2 + w_p1p2 * (p1.y - p2.y)^2

NOTE : no xy terms, x, y, can be threated separatly

Q(X) : x part of the equation
	eg. 4(x2-1)^2 + 2(x2-x1)^2 + 1(x1-0)^2
			 ^pad1.x				  ^pad2.x
		  ^p2.x	NOTE p2 is conn to pad1
		^weight

QY) : y part of the eq.

to find the min solve for dQ/dx = 0		// (deriv is always min here)


dQx/dx1 = 0+4(x2-x1)(-1)+2(x1)
		= 6*x1-4*x2 = 0
dQx/dx2 = -4*x1+12*x2-8 = 0

dQy/dy1 = 6*y1-4*y2 = 0
dQy/dy2 = -4*y1+12*y2-4 = 0

just solve the lin.sys. M x = b, M y = b
[6 -4; -4 12] X = [0; 8]	=> X = [x1; x2] = [0.571; 0.857]
[6 -4; -4 12] Y = [0; 4]	=> Y.... = [0.286, 0.429]

NOTE : the matrix are the same, b different
NOTE : the points in the eg. are on the same line,
	but W=4 short wire, W=1 long wire


to build M, first build C, connectivity matrix
	C[i, j] = C[j, i] = 2 if pi connected pj
						0 otherwise
	NOTE : ignore the pads


M elements non in the diag.
	M[i,j] = -C[i, j]		i not j
M elements in the diag
	M[i, i] = sum j. j in [1, n]. C[i, j] + weight of the _pad_ wires	
		// sum of the row i in C + eventual pad wires connected

	bx[i] = wi * xi,	if pi connected to pad, also wi is weight of pad conn.
						and xi location of the _PAD_
			0,			otherwise
	by same thing

NOTE : M is symmetric, positive semi-definite, sparse
		diagonally dominant M[i,i] >= M[i,j]


Problem arise : points will overlap, and tend to concentrate in just one area
Solution :
	1.calc Q for area A.
	2.divide A/2 = {A1,A2}, Q/2 ={Q1 = p in A1, Q2 = p in A2}
	3.solve Q1 for A1, A2 for A2
	4.repeat (interchange divide horiz/vert) ad nauseam


Other prob : 2. the initial Q will not spread points equally in the two halves
sort gates on x values, then on y values (for the vert cut, otherwise reverse),
pick the first half p[0..N/2-1] will go on the left, p[N/2...N-1] to the right

Other prob : keep gates on the rhs on rhs, lhs on lhs
	also what if points connected to pads on rhs are put on lhs ?

introduce pseudo-pads :
	on the division line pads get added

	so if point1(rhs) <-> pad/point2(lhs)
				~> point1(rhs) <-> pad_new(rhs) <-> pad/point2(lhs)


this in practice happens projecting pads on opposite side connected to choosen
side on the boundry and also project the P[N/2...N] that is on the choosen side
but needs to migrate to the opposite side. and the P[N/2..N] that are on the
opposite side and are connected to the choosen side. those become new virtual
pads.

then change side and project all the things in the opposite that are connected
to the now current side on the division line introducing the vpads.

on the second division remember that the division is made of 2 lines, project
on that.

at this point - Legalization : with precise positions given real wights/heights
	using anealing for example (with a very cool T value)



Tech Mapping
------

from boolean logic network, using component library, to real logic gates
single logic network implementable in different ways uing different lib
componets, algo : net, lib, cost model -> somewhat minimal net (minimize cost)


algo of tech mapping : transform logic to real gates
	transform each SOP node to NAND/NOT => big flat network

----
TMapping as tree covering

method is simple and _optimal_

starting data : subject tree (flat NAND2/NOT net)

1. library mapping : transform the input library in NADN2/NOT gate netwokrs
2. structural mapping : avoid bool algebra, just pattern matching on the lib


tree repr form the output to the input nodes
elements of the tree NAND2, NOT, input

lib element match circuit -> from the root
	NOT matches NOT
	NAND2 matches MAND2
	input matches everything
	otherwise no match

NOTE : symmetry matters

Tree Cover
	evey node in subject tree is covered by lib tree
	output ov every lib gate overlaps input of nect lib pattern

how to choose the covering that minimizes cost? recursion, duh..


Problem. how to treefy the netlist? the netlists are DAGs not single root trees
	every gatewith fanout > 2 -> root of new subtree
	each connected fanout -> NEW _input_ to a new tree




	2         3
	|_________|
    |    |
    4    1-5

	1-5, 4 :- fanout > 1 -> new trees -(4)- , -(1-5)-
	2-(4, 1) :- connected to fanout -> 2-(new1, new2)
	3-(1, 4) :- connected to fanout -> 3-(new3, new4)


Tree matching algo : recursive trivial
mincost also trivial : note when mincost for node x, is computes insert in
	table, so that when recursivelly calling it doesn get recomputed each time
	(dyn programming)


Routing - Maze Routing
-----

space :: 2D-grid cells
wire :: adj-connected cells
obstacle :: occupied cells

pins are on-grid, in the center of the grid cell

----
Simple 1-layer routing for 2-point nets

Alg : source `connect` target
on cell (Dir-Dir) where Dir {N S W E}

Reachable = S source, Reachable <- i = 0
while T target not in Reachable
	Reachable = find all adj-cells reachable (not yet labelled*) from Reachable
	Reacheble <- i++

*) NOTE: if Cell is labelled i cannot be relabelled i+1

Path = find one of adj-cell where Cell.i = i-1
	Path <- obstructed
	i = i-1

Multi-point nets 1 src - many tgt
1. run 2-net algo (find closest pad)
2. backtrace to src
3. DO NOT LABLE path as obstacle but each cell of the path as src
4. run the 2-point algo for the new src set
.. ( do farall targets)
5. mark all path as obstacle


Optimal path : Steiner Tree (exponentially hard)

Multi point - multi layer
vias allowed in limited set of cells
algo is the same

Non uniform grid cost -> for each cell the expantion process cost
different. eg traversing via = hi cost

this is used to make pads prefer different paths.
eg assign very congested area to hi cost to make it less congested
avoid vias

algo is the same, but there is a conflict situation when expanding
	c = cost, s = src
	[S = 1][2  c=1]
	[4 c=3][x  c=3]

	is x 6 = 3(easr)+3(cost) or 5 = 2(north)+3(cost)?
	ANSWER costs 5, use the smallest number


algo :
	find C cheapest cell in Wavefront
	find Neighbors if C not reached
	Costs = cost of Neighbors
	Neighbors .predecessors is C
	Wavefront[Costs] = Neighbors
	Grid[Neighbors] = Reached
	rm C form Wavefont
	algo


Pathcost : sum of costs on path, to index wavefront
Wavefont : fronteer of cells fow which the patcost has been calcd
Reached : cell which pathcost has been computed (in order not to ignore when
	removed from WF
Expanded : cell removed from WF and used to expand it


        W
       WEW
      WEEEW
     WEEEEEW
      WEEEW
       WEW
        W

if bend penaly is added cost function is inconsistent


problem..
eg bend cost = 2

113
211

S = (0, 0), C = 1 // 0,0 is top top
W = {(1, 0) C = 2, (0, 1) C = 3} expand D, R
W = {(1, 1) C = 5, ...} // expand D BEND!
W = {(2, 1) C = 8, ...} // expand R BEND!

but DRRR cost is 7

how is solved?
if i is the number of steps to reach target continue to run the algo for
k * i more steps where k can be 0.1 for example

---------
Depth fst search : bias expansion process twds the target direction.
can this be done consistently?

one way to bias is to search first in the T.x * T.y * S.x * S.y rectangle
add a predictor function to the cost
	pathcost(S src to C cell) + predictor(cell C to T target)

typical estimator : distance to target * smallest cell cost


NOTE : if exstimate is less than the pathcost the min cost path is guaranteed

small DFS algo tweak :
	pathcost(S from Wf to C) + C cost + pathcost(C to T) ~>
	pathcost(S from Wf to C) + C cost + K * pathcost(C to T)

	K : tuning parameter (converge faster, less optimal)

-----
Global routing

idea : chop the circuit into coarse grid cells (GBOX)
(eg 200x200 cells per GBOX)

1. do first routing iteration.
2. then int the found GBOXes set do the detailed routing.


in the detailed routing the cells are either blocked (inf cost) or have a cost
proportional to how much you want to avoid them

in global routing cells have dynamic costs; they remember the number of wires
that passes throu them, and ther cost increases
														  | f=inf
usually the cost(nwires) is {							  |
	c1			, nwires in [0..x]						 /
	c1 + k*x	, nwires in [x+1..y]					/ f=(c1+kx)
	inf/very hi	, nwires in [y+1..inf]		 f=c1______/
}											   0       x  y
.




Timing
-------

How is timing estimated?
From the Logic side and from the Layout side.

Assumption : Design is synchronous
Timing Anal : the signal must propagate in the logic network within the given
	clock period

Gate delay model : given per gate delay calculate the whole network
ignoring the logic : topological analisys, (can get false paths, paths that
	can't be logically taken but result topologivcally in the max delay)

Assume that all the paths are statically sensitizable (all apths can be
	reached)
NOTE : pessimistic assumption


Static Timing Analysis (STA)
------

Verices : Wires
Edges : Gates (from input set to output set exists an edge called Cell Arc)

eg. (a AND b) = c  c OR d = e
	wire a -> c = AND's Arc cost 2
	wire b -> c = AND's Arc cost 2
	wire c -> e = OR's Arc cost 3
	wire d -> e = OR's Arc cost 3

by convenction add a source (SRC) and sink (SNK) nodes
	src : with 0 weight to each node
	snk : with 0 weight fron each node

eg. add to prec eg.
	src -> a = cost 0
	src -> b = cost 0
	src -> d = cost 0
	e -> snk = cost 0

NOTE : the net has 1 entry and 1 exit point (SRC - SNK)

in this model can also add wire costs as 1-in 1-out special gate
	(like concentraded model)



eg. from the prev. eg
	src->0 = cost 0
	a->x = Wire_a's cost 1.2	<<!!
	x->c = AND's cost 2
	....

How to calc longest timing? cannot eval all paths..

for a node n
AT(n) = arrival time, latest time the signal can arrive (become stable) at
	node n
RAT(n) = required arrival time at node n the latest time the signal is allowed
	to beome stable at node n // sort of the longest path to the sink

Slack(n) = RAT(n) - AT(n)
	the amount by wich a sig, can be delayes at n and not increase the longest
	path through the net.
	positive good, negative bad
	positive = extra margin to change the circ. (to optimize) and not change
		max delay
	negative slack = problem, affect critical path the most.

computed recursevly.

pred(n) : nodes connected to n directly
del(p, n) : the cost from node p in pred(n) to n

AT(n) = max delay to n = {
	0, if n == SRC
	max(AT(p) + del(p, n) | for p in pred(n)), otherwise
}

RAT(n) also computed recursly, but from SNK

succ(n) : nodes connected from n
del(n, s) : the cost of the n->s, s in succ(n) connection
NOTE : RATs are refined relative the end of the clock cycle (T)

RAT(n) = {
	T //cycle time//, if n == SNK
	min(RAT(s)-del(n, s) | s in succ(n)), otherwise
}

	____ AT
     ___v
CLK |   |___|          Positive Slack = Arrival time < Req arrival time
    0       T [ns]     Negative Slack = Arrival time > Req arrival time (broken logic)
	  ^_____				because we calcd RAT form the end of clock time neg
	 RAT					means it will not arrive in time (less than T).


NOTE : you can always trace a path with the arrival slack value and trace the
	root cause of the problem


How to enumerate worst paths in worst case order (efficiently)?

multiple stats :
1. topological sorting : listo of the nodes s.t. if p->s p appears before s
	(mulitiple legit ords) 


assuming top.sort

computeAts(g) {
	AT(g->src) = 0
	foreach n in top_ord(g) {
		AT(n) = -inf
		foreach p in pred(n) {
			AT(n) = max(AT(n), AT(p) + del(p, n))
		}
	}
}
computeRats(g) {
	RAT(g->sink) = CycleTime
	foreach n in reverse(top_ord(g)) {
		RAT(n) = -inf
		foreach p in succ(n) {
			AT(n) = min(RAT(n), RAT(p) - del(p, n))
		}
	}
}

REMEMBER : all nodes on longest path have the same slack

to find the N worst paths same algo as maze routing

order the heap with the smallest slack on top

start pushing on the heap <path, delay, slack> = {src, 0, 0}

expansion : 
	pop path
	is path the sink ?
		yes -> print path
		no -> reach the successor nodes to make new partial paths, and
		push in the heap  {path, delay, slack}



Vec<Vec<path>, delay, slack> res
Heap<Vec<path>, delay, slack> heap = {{src}, 0, src->salck // 0 //}

while (!h.empty()) {
	p = heap.pop()
	for {nx, delay} in p.0.last() {
		succ = p.copy()
		succ.0.push(nx)
		succ.1 += delay
		succ.2 = nx->slack
		if (nx == snk) {
			res.push(succ) // or store only the first n times
		} else {
			heap.push(succ)
		}
	}
}

In the end res comes out in delay order, from worst to best.

------
Interconnect Timing

wire delay : depends on lenght, and load (number of gates attached)

for a wire :
	R, resistance = r * L / W    where r = rho / H, but cannot be
	changed, depends on manufacturing preocess, L, W can be controlled
	C, capacitance = eps * W * L / d = c * W * L
	W, L can be controlled, NOTE : simplistic assump. all conducting surfaces
	create cap

pi model : models a wire as
2C-1R

o-.-R-.-o
  |   |
  C   C
  |   |
  V   V


NOTE : a n-furcation in the join point there are n capacitors connected
	= Cn = sum Ci i in [0, n-1]


result of a net : RC-tree, simple to analize

root : signal input
leafs : ground(s)

need to model the driver gates : V_IN + R
need to model the driven gates : Capacitors

Elmore delay formula
	tau = 0
	tau = tau + R * sum all caps downstream
	this foreach R in the upstreap_gate-downstream_gate

------
Elmore eg.

r = 1, c = 2
R = r*L/W C = c*W*L


a->(b)		W=1, L=20
b->(c, d)	W=1, L=5
c->(e, f)	W=1, L=2
d->(g, h)	W=1, L=2

gate_a_R = 20
C_load_efgh = 1

gate_a -> h = 2881 =
	20   * (20+30+2*9+4*3)
	+ 20 * (30+2*9+4*3)
	+ 5  * (9*2*3)
	+ 2  * (3)

NOTE : if a single L in the tree changes both the R, C of the arc change
	and threfore all the values in the calc.
	NOT only in the subtree of the arc, but in ALL the leafs

